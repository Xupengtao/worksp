# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _back
else:
    import _back

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def PDW_get(pPDW, index, para):
    return _back.PDW_get(pPDW, index, para)

def OpenShareMemory(name, length, pBuffer, hMap):
    return _back.OpenShareMemory(name, length, pBuffer, hMap)

def CloseShareMemory(pBuffer, hMap):
    return _back.CloseShareMemory(pBuffer, hMap)

def Init(pdw_num):
    return _back.Init(pdw_num)

def ReadPdw(fp, pdw_num, pdw, rf_min, rf_max, doa_min, doa_max, pa_min, pa_max, pw_min, pw_max, fileType):
    return _back.ReadPdw(fp, pdw_num, pdw, rf_min, rf_max, doa_min, doa_max, pa_min, pa_max, pw_min, pw_max, fileType)

def ReadPdw1(fp, pls_time, pdw, rf_min, rf_max, doa_min, doa_max, pa_min, pa_max, pw_min, pw_max, fileType):
    return _back.ReadPdw1(fp, pls_time, pdw, rf_min, rf_max, doa_min, doa_max, pa_min, pa_max, pw_min, pw_max, fileType)

def OpenPdw(filename, fileFlag, fileType):
    return _back.OpenPdw(filename, fileFlag, fileType)

def ClosePdw(fileFlag):
    return _back.ClosePdw(fileFlag)

def process(pdw_num, rf_min, rf_max, doa_min, doa_max, pa_min, pa_max, pw_min, pw_max, merge_en, fileType):
    return _back.process(pdw_num, rf_min, rf_max, doa_min, doa_max, pa_min, pa_max, pw_min, pw_max, merge_en, fileType)

def process1(pls_time, rf_min, rf_max, doa_min, doa_max, pa_min, pa_max, pw_min, pw_max, merge_en, fileType):
    return _back.process1(pls_time, rf_min, rf_max, doa_min, doa_max, pa_min, pa_max, pw_min, pw_max, merge_en, fileType)

def fp_get_cur(flag):
    return _back.fp_get_cur(flag)

def fp_set(progress):
    return _back.fp_set(progress)

def SearchInFile(pdw_num, trgt):
    return _back.SearchInFile(pdw_num, trgt)

def SearchInFile_init(filename, pls_time, trgt, progress, type):
    return _back.SearchInFile_init(filename, pls_time, trgt, progress, type)

def SearchInFile_post(pargs_all):
    return _back.SearchInFile_post(pargs_all)

def init_process(pPDW, pdw_n):
    return _back.init_process(pPDW, pdw_n)

def res_get(i):
    return _back.res_get(i)

def edw_get(i):
    return _back.edw_get(i)

def pdw_get(pdw, i):
    return _back.pdw_get(pdw, i)

def int2uint_32(v):
    return _back.int2uint_32(v)

def uint2int_32(v):
    return _back.uint2int_32(v)
class flaged_PDW(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pdws = property(_back.flaged_PDW_pdws_get, _back.flaged_PDW_pdws_set)
    nPDW = property(_back.flaged_PDW_nPDW_get, _back.flaged_PDW_nPDW_set)
    flag = property(_back.flaged_PDW_flag_get, _back.flaged_PDW_flag_set)
    trgt_no = property(_back.flaged_PDW_trgt_no_get, _back.flaged_PDW_trgt_no_set)
    n = property(_back.flaged_PDW_n_get, _back.flaged_PDW_n_set)

    def __init__(self):
        _back.flaged_PDW_swiginit(self, _back.new_flaged_PDW())
    __swig_destroy__ = _back.delete_flaged_PDW

# Register flaged_PDW in _back:
_back.flaged_PDW_swigregister(flaged_PDW)
cvar = _back.cvar

class Trgt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    edw = property(_back.Trgt_edw_get, _back.Trgt_edw_set)
    max_num = property(_back.Trgt_max_num_get, _back.Trgt_max_num_set)
    nTrgt = property(_back.Trgt_nTrgt_get, _back.Trgt_nTrgt_set)

    def __init__(self):
        _back.Trgt_swiginit(self, _back.new_Trgt())
    __swig_destroy__ = _back.delete_Trgt

# Register Trgt in _back:
_back.Trgt_swigregister(Trgt)

class Res(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    res = property(_back.Res_res_get, _back.Res_res_set)
    n_res = property(_back.Res_n_res_get, _back.Res_n_res_set)

    def __init__(self):
        _back.Res_swiginit(self, _back.new_Res())
    __swig_destroy__ = _back.delete_Res

# Register Res in _back:
_back.Res_swigregister(Res)

class G_Var(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pBuffer = property(_back.G_Var_pBuffer_get, _back.G_Var_pBuffer_set)
    hMap = property(_back.G_Var_hMap_get, _back.G_Var_hMap_set)
    progress = property(_back.G_Var_progress_get, _back.G_Var_progress_set)
    fpdw = property(_back.G_Var_fpdw_get, _back.G_Var_fpdw_set)
    fp = property(_back.G_Var_fp_get, _back.G_Var_fp_set)
    fp_tmp = property(_back.G_Var_fp_tmp_get, _back.G_Var_fp_tmp_set)
    trgt = property(_back.G_Var_trgt_get, _back.G_Var_trgt_set)
    out = property(_back.G_Var_out_get, _back.G_Var_out_set)
    DebugModeFlag = property(_back.G_Var_DebugModeFlag_get, _back.G_Var_DebugModeFlag_set)

    def __init__(self):
        _back.G_Var_swiginit(self, _back.new_G_Var())
    __swig_destroy__ = _back.delete_G_Var

# Register G_Var in _back:
_back.G_Var_swigregister(G_Var)

STRU = _back.STRU
XXG_C = _back.XXG_C
XXG_Z = _back.XXG_Z
XD = _back.XD
X5_DGN = _back.X5_DGN
RF = _back.RF
DOA = _back.DOA
PW = _back.PW
PA = _back.PA
TOA = _back.TOA

def BLcon2(value):
    return _back.BLcon2(value)

def BLcon4(value):
    return _back.BLcon4(value)

def time_diff(t1, t2):
    return _back.time_diff(t1, t2)

def uint16_get(num, i):
    return _back.uint16_get(num, i)

def uint32_get(num, i):
    return _back.uint32_get(num, i)

def int32_get(num, i):
    return _back.int32_get(num, i)

def ReadXxgZPDW(pPDW, fp):
    return _back.ReadXxgZPDW(pPDW, fp)

def ReadXdPDW(pPdw, fp):
    return _back.ReadXdPDW(pPdw, fp)

def ReadX5DGNPDW(pPDW, fp):
    return _back.ReadX5DGNPDW(pPDW, fp)
Q_PAR_MAX_NUM = _back.Q_PAR_MAX_NUM
class QParPRI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    dat = property(_back.QParPRI_dat_get, _back.QParPRI_dat_set)
    cnt = property(_back.QParPRI_cnt_get, _back.QParPRI_cnt_set)
    min = property(_back.QParPRI_min_get, _back.QParPRI_min_set)
    max = property(_back.QParPRI_max_get, _back.QParPRI_max_set)
    fpi = property(_back.QParPRI_fpi_get, _back.QParPRI_fpi_set)
    n = property(_back.QParPRI_n_get, _back.QParPRI_n_set)
    type = property(_back.QParPRI_type_get, _back.QParPRI_type_set)

    def __init__(self):
        _back.QParPRI_swiginit(self, _back.new_QParPRI())
    __swig_destroy__ = _back.delete_QParPRI

# Register QParPRI in _back:
_back.QParPRI_swigregister(QParPRI)

class QParRF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    dat = property(_back.QParRF_dat_get, _back.QParRF_dat_set)
    cnt = property(_back.QParRF_cnt_get, _back.QParRF_cnt_set)
    min = property(_back.QParRF_min_get, _back.QParRF_min_set)
    max = property(_back.QParRF_max_get, _back.QParRF_max_set)
    n = property(_back.QParRF_n_get, _back.QParRF_n_set)
    type = property(_back.QParRF_type_get, _back.QParRF_type_set)

    def __init__(self):
        _back.QParRF_swiginit(self, _back.new_QParRF())
    __swig_destroy__ = _back.delete_QParRF

# Register QParRF in _back:
_back.QParRF_swigregister(QParRF)

class QEdwStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pri = property(_back.QEdwStruct_pri_get, _back.QEdwStruct_pri_set)
    rf = property(_back.QEdwStruct_rf_get, _back.QEdwStruct_rf_set)
    doa = property(_back.QEdwStruct_doa_get, _back.QEdwStruct_doa_set)
    pa = property(_back.QEdwStruct_pa_get, _back.QEdwStruct_pa_set)
    pw = property(_back.QEdwStruct_pw_get, _back.QEdwStruct_pw_set)
    db = property(_back.QEdwStruct_db_get, _back.QEdwStruct_db_set)
    tick = property(_back.QEdwStruct_tick_get, _back.QEdwStruct_tick_set)
    pn = property(_back.QEdwStruct_pn_get, _back.QEdwStruct_pn_set)
    toa = property(_back.QEdwStruct_toa_get, _back.QEdwStruct_toa_set)
    isTR = property(_back.QEdwStruct_isTR_get, _back.QEdwStruct_isTR_set)
    batch = property(_back.QEdwStruct_batch_get, _back.QEdwStruct_batch_set)
    flow_no = property(_back.QEdwStruct_flow_no_get, _back.QEdwStruct_flow_no_set)

    def __init__(self):
        _back.QEdwStruct_swiginit(self, _back.new_QEdwStruct())
    __swig_destroy__ = _back.delete_QEdwStruct

# Register QEdwStruct in _back:
_back.QEdwStruct_swigregister(QEdwStruct)

PRIT_FAIL = _back.PRIT_FAIL
PRIT_UN = _back.PRIT_UN
PRIT_FX = _back.PRIT_FX
PRIT_ST = _back.PRIT_ST
PRIT_JT = _back.PRIT_JT
PRIT_SL = _back.PRIT_SL
PRIT_DP = _back.PRIT_DP
PRIT_CO = _back.PRIT_CO
PRIT_STZ = _back.PRIT_STZ
PRIT_CODE = _back.PRIT_CODE
PRIT_END = _back.PRIT_END
RFT_UN = _back.RFT_UN
RFT_FX = _back.RFT_FX
RFT_DIV = _back.RFT_DIV
RFT_GRP = _back.RFT_GRP
RFT_INTER = _back.RFT_INTER
RFT_FM = _back.RFT_FM
RFT_CO = _back.RFT_CO
RFT_NOISE = _back.RFT_NOISE
RFT_OTHER = _back.RFT_OTHER
RFT_END = _back.RFT_END
PWT_COM = _back.PWT_COM
PWT_DIV = _back.PWT_DIV
PWT_AGILITY = _back.PWT_AGILITY
PWT_DOUBLE = _back.PWT_DOUBLE
PWT_MORE = _back.PWT_MORE
PWT_CW = _back.PWT_CW
SCPT_UN = _back.SCPT_UN
SCPT_TR = _back.SCPT_TR
SCPT_CIRCLE = _back.SCPT_CIRCLE
SCPT_SEGMENT = _back.SCPT_SEGMENT
SCPT_CONE = _back.SCPT_CONE
class PDW(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    toa = property(_back.PDW_toa_get, _back.PDW_toa_set)
    rf = property(_back.PDW_rf_get, _back.PDW_rf_set)
    doa = property(_back.PDW_doa_get, _back.PDW_doa_set)
    pa = property(_back.PDW_pa_get, _back.PDW_pa_set)
    pw = property(_back.PDW_pw_get, _back.PDW_pw_set)

    def __init__(self):
        _back.PDW_swiginit(self, _back.new_PDW())
    __swig_destroy__ = _back.delete_PDW

# Register PDW in _back:
_back.PDW_swigregister(PDW)

class MatrixStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    dtoa = property(_back.MatrixStruct_dtoa_get, _back.MatrixStruct_dtoa_set)
    drf = property(_back.MatrixStruct_drf_get, _back.MatrixStruct_drf_set)
    ddoa = property(_back.MatrixStruct_ddoa_get, _back.MatrixStruct_ddoa_set)
    toa = property(_back.MatrixStruct_toa_get, _back.MatrixStruct_toa_set)
    rf = property(_back.MatrixStruct_rf_get, _back.MatrixStruct_rf_set)
    pw = property(_back.MatrixStruct_pw_get, _back.MatrixStruct_pw_set)
    pa = property(_back.MatrixStruct_pa_get, _back.MatrixStruct_pa_set)
    doa = property(_back.MatrixStruct_doa_get, _back.MatrixStruct_doa_set)
    flag = property(_back.MatrixStruct_flag_get, _back.MatrixStruct_flag_set)
    cont = property(_back.MatrixStruct_cont_get, _back.MatrixStruct_cont_set)
    n = property(_back.MatrixStruct_n_get, _back.MatrixStruct_n_set)
    m = property(_back.MatrixStruct_m_get, _back.MatrixStruct_m_set)

    def __init__(self):
        _back.MatrixStruct_swiginit(self, _back.new_MatrixStruct())
    __swig_destroy__ = _back.delete_MatrixStruct

# Register MatrixStruct in _back:
_back.MatrixStruct_swigregister(MatrixStruct)

class MatrixTrgtStruct(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    rf_min = property(_back.MatrixTrgtStruct_rf_min_get, _back.MatrixTrgtStruct_rf_min_set)
    rf_max = property(_back.MatrixTrgtStruct_rf_max_get, _back.MatrixTrgtStruct_rf_max_set)
    pri_min = property(_back.MatrixTrgtStruct_pri_min_get, _back.MatrixTrgtStruct_pri_min_set)
    pri_max = property(_back.MatrixTrgtStruct_pri_max_get, _back.MatrixTrgtStruct_pri_max_set)
    doa_min = property(_back.MatrixTrgtStruct_doa_min_get, _back.MatrixTrgtStruct_doa_min_set)
    doa_max = property(_back.MatrixTrgtStruct_doa_max_get, _back.MatrixTrgtStruct_doa_max_set)
    pa_min = property(_back.MatrixTrgtStruct_pa_min_get, _back.MatrixTrgtStruct_pa_min_set)
    pa_max = property(_back.MatrixTrgtStruct_pa_max_get, _back.MatrixTrgtStruct_pa_max_set)
    pw_min = property(_back.MatrixTrgtStruct_pw_min_get, _back.MatrixTrgtStruct_pw_min_set)
    pw_max = property(_back.MatrixTrgtStruct_pw_max_get, _back.MatrixTrgtStruct_pw_max_set)
    ddoaThr = property(_back.MatrixTrgtStruct_ddoaThr_get, _back.MatrixTrgtStruct_ddoaThr_set)
    drfThr = property(_back.MatrixTrgtStruct_drfThr_get, _back.MatrixTrgtStruct_drfThr_set)
    multi = property(_back.MatrixTrgtStruct_multi_get, _back.MatrixTrgtStruct_multi_set)

    def __init__(self):
        _back.MatrixTrgtStruct_swiginit(self, _back.new_MatrixTrgtStruct())
    __swig_destroy__ = _back.delete_MatrixTrgtStruct

# Register MatrixTrgtStruct in _back:
_back.MatrixTrgtStruct_swigregister(MatrixTrgtStruct)

class PDW_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    idx = property(_back.PDW_STRUCT_idx_get, _back.PDW_STRUCT_idx_set)
    rf = property(_back.PDW_STRUCT_rf_get, _back.PDW_STRUCT_rf_set)
    pw = property(_back.PDW_STRUCT_pw_get, _back.PDW_STRUCT_pw_set)
    doa = property(_back.PDW_STRUCT_doa_get, _back.PDW_STRUCT_doa_set)
    pa = property(_back.PDW_STRUCT_pa_get, _back.PDW_STRUCT_pa_set)
    toa = property(_back.PDW_STRUCT_toa_get, _back.PDW_STRUCT_toa_set)
    time = property(_back.PDW_STRUCT_time_get, _back.PDW_STRUCT_time_set)
    flag = property(_back.PDW_STRUCT_flag_get, _back.PDW_STRUCT_flag_set)

    def __init__(self):
        _back.PDW_STRUCT_swiginit(self, _back.new_PDW_STRUCT())
    __swig_destroy__ = _back.delete_PDW_STRUCT

# Register PDW_STRUCT in _back:
_back.PDW_STRUCT_swigregister(PDW_STRUCT)

class ProcessArgs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    trgt = property(_back.ProcessArgs_trgt_get, _back.ProcessArgs_trgt_set)
    mat = property(_back.ProcessArgs_mat_get, _back.ProcessArgs_mat_set)
    pdw_toa = property(_back.ProcessArgs_pdw_toa_get, _back.ProcessArgs_pdw_toa_set)
    pdw_rf = property(_back.ProcessArgs_pdw_rf_get, _back.ProcessArgs_pdw_rf_set)
    pdw_doa = property(_back.ProcessArgs_pdw_doa_get, _back.ProcessArgs_pdw_doa_set)
    pdw_flag = property(_back.ProcessArgs_pdw_flag_get, _back.ProcessArgs_pdw_flag_set)
    pdw_pw = property(_back.ProcessArgs_pdw_pw_get, _back.ProcessArgs_pdw_pw_set)
    pdw_pa = property(_back.ProcessArgs_pdw_pa_get, _back.ProcessArgs_pdw_pa_set)
    pdw_n = property(_back.ProcessArgs_pdw_n_get, _back.ProcessArgs_pdw_n_set)

    def __init__(self):
        _back.ProcessArgs_swiginit(self, _back.new_ProcessArgs())
    __swig_destroy__ = _back.delete_ProcessArgs

# Register ProcessArgs in _back:
_back.ProcessArgs_swigregister(ProcessArgs)


def del_matrix(pmat):
    return _back.del_matrix(pmat)

def q_matrix_open(n, m):
    return _back.q_matrix_open(n, m)

def q_matrix_calc(pMatrix, toa, rf, doa, pa, pw, n):
    return _back.q_matrix_calc(pMatrix, toa, rf, doa, pa, pw, n)

def q_matrix_find(pMatrix, trgt):
    return _back.q_matrix_find(pMatrix, trgt)

def setTrgt(args, trgt):
    return _back.setTrgt(args, trgt)


